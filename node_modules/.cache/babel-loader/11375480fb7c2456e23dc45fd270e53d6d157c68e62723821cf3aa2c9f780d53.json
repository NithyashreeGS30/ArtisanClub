{"ast":null,"code":"// import React, { useState } from 'react';\n// import './BodyPage.css';\n// import Header from './header/header';\n// import CheckoutPage from './checkoutpage/checkoutpage';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import EditIcon from '@material-ui/icons/Edit';\n// import AddIcon from '@material-ui/icons/Add';\n\n// const BodyPage1 = () => {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [isCartOpen, setIsCartOpen] = useState(false);\n//   const [products, setProducts] = useState([\n//     { id: 1, name: 'Product 1', price: '$10', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 2, name: 'Product 2', price: '$20', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 3, name: 'Product 3', price: '$30', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 4, name: 'Product 4', price: '$40', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 5, name: 'Product 5', price: '$50', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 6, name: 'Product 6', price: '$60', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 7, name: 'Product 7', price: '$70', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 8, name: 'Product 8', price: '$80', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 9, name: 'Product 9', price: '$90', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 10, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 11, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 12, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//   ]);\n//   const [isAddProductFormOpen, setIsAddProductFormOpen] = useState(false);\n//   const [newProduct, setNewProduct] = useState({ name: '', price: '', imageUrl: '' });\n//   const [editableProductId, setEditableProductId] = useState(null); // State to track which product is being edited\n//   const [editedProduct, setEditedProduct] = useState({ name: '', price: '', imageUrl: '' });\n\n//   const addToCart = (product) => {\n//     const existingItemIndex = cartItems.findIndex(item => item.id === product.id);\n\n//     if (existingItemIndex !== -1) {\n//       const updatedCartItems = cartItems.map((item, index) => {\n//         if (index === existingItemIndex) {\n//           return { ...item, quantity: item.quantity + 1 };\n//         }\n//         return item;\n//       });\n\n//       setCartItems(updatedCartItems);\n//     } else {\n//       setCartItems([...cartItems, { ...product, quantity: 1 }]);\n//     }\n//   };\n\n//   const removeFromCart = (productId) => {\n//     const updatedCartItems = cartItems.filter(item => item.id !== productId);\n//     setCartItems(updatedCartItems);\n//   };\n\n//   const updateCartItem = (productId, newQuantity) => {\n//     const updatedCartItems = cartItems.map(item => {\n//       if (item.id === productId) {\n//         return { ...item, quantity: newQuantity };\n//       }\n//       return item;\n//     });\n//     setCartItems(updatedCartItems);\n//   };\n\n//   const toggleCart = () => {\n//     setIsCartOpen(prevState => !prevState);\n//   };\n\n//   const addProduct = () => {\n//     setProducts([...products, { ...newProduct, id: products.length + 1 }]);\n//     setIsAddProductFormOpen(false);\n//     setNewProduct({ Art_ID:' ',name: '', price: '', imageUrl: '' });\n//   };\n\n//   const deleteProduct = (productId) => {\n//     const updatedProducts = products.filter(product => product.id !== productId);\n//     setProducts(updatedProducts);\n//   };\n\n//   const handleEditProduct = (productId) => {\n//     setEditableProductId(productId);\n//     const productToEdit = products.find(product => product.id === productId);\n//     setEditedProduct({ ...productToEdit });\n//   };\n\n//   const submitEditedProduct = () => {\n//     const updatedProducts = products.map(product => {\n//       if (product.id === editableProductId) {\n//         return { ...editedProduct };\n//       }\n//       return product;\n//     });\n//     setProducts(updatedProducts);\n//     setEditableProductId(null); // Reset editableProductId after updating the product\n//   };\n\n//   return (\n//     <div>\n//       <Header headName=\"SignOut\" cartCount={cartItems.length} toggleCart={toggleCart} />\n//       <div className=\"body-page\">\n//         <div className=\"product-grid\">\n//           {/* Plus icon to toggle add product form */}\n//           <div onClick={() => setIsAddProductFormOpen(true)}>\n//             <AddIcon />\n//             <span>Add Product</span>\n//           </div>\n\n//           {/* Add product form */}\n//           {isAddProductFormOpen && (\n//             <div className=\"add-product-modal\">\n//               <div className=\"add-product-modal-content\">\n//                 <span className=\"add-product-modal-close\" onClick={() => setIsAddProductFormOpen(false)}>&times;</span>\n//                 <h2>Add Product</h2>\n//                 <form onSubmit={addProduct}>\n//                 <input type=\"text\" value={newProduct.Art_ID} onChange={(e) => setNewProduct({ ...newProduct, Art_ID: e.target.value })} placeholder=\"Artist ID\" required />\n//                   <input type=\"text\" value={newProduct.name} onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })} placeholder=\"Product Name\" required />\n//                   <input type=\"text\" value={newProduct.price} onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })} placeholder=\"Price\" required />\n//                   <input type=\"text\" value={newProduct.imageUrl} onChange={(e) => setNewProduct({ ...newProduct, imageUrl: e.target.value })} placeholder=\"Image URL\" required />\n//                   <button type=\"submit\">Add Product</button>\n//                 </form>\n//               </div>\n//             </div>\n//           )}\n\n//           {/* Display existing products */}\n//           {products.map(product => (\n//             <div key={product.id} className=\"product-card\">\n//               <img src={product.imageUrl} alt={product.name} className=\"product-image\" />\n//               <div className=\"product-info\">\n//                 {/* Editable fields */}\n//                 {editableProductId === product.id ? (\n//                   <div>\n//                     <input type=\"text\" value={editedProduct.name} onChange={(e) => setEditedProduct({ ...editedProduct, name: e.target.value })} />\n//                     <input type=\"text\" value={editedProduct.price} onChange={(e) => setEditedProduct({ ...editedProduct, price: e.target.value })} />\n//                     <input type=\"text\" value={editedProduct.imageUrl} onChange={(e) => setEditedProduct({ ...editedProduct, imageUrl: e.target.value })} />\n//                     <button onClick={submitEditedProduct}>Submit</button>\n//                   </div>\n//                 ) : (\n//                   <div>\n//                     <div className=\"product-name\">{product.name}</div>\n//                     <div className=\"product-price\">{product.price}</div>\n//                   </div>\n//                 )}\n//                 <button className=\"add-to-cart-button\" onClick={() => addToCart(product)}>\n//                   <AddIcon /> Add to Cart\n//                 </button>\n//                 {/* Admin functionalities */}\n//                 <DeleteIcon onClick={() => deleteProduct(product.id)} />\n//                 <EditIcon onClick={() => handleEditProduct(product.id)} />\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       {/* Conditionally render CheckoutPage based on isCartOpen */}\n//       {isCartOpen && (\n//         <CheckoutPage\n//           cartItems={cartItems}\n//           removeFromCart={removeFromCart}\n//           updateCartItem={updateCartItem}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default BodyPage1;","map":{"version":3,"names":[],"sources":["/Users/nithyashree/Desktop/ARTISAN/ArtisanClub/src/bodyadmin.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './BodyPage.css';\n// import Header from './header/header';\n// import CheckoutPage from './checkoutpage/checkoutpage';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import EditIcon from '@material-ui/icons/Edit';\n// import AddIcon from '@material-ui/icons/Add';\n\n// const BodyPage1 = () => {\n//   const [cartItems, setCartItems] = useState([]);\n//   const [isCartOpen, setIsCartOpen] = useState(false);\n//   const [products, setProducts] = useState([\n//     { id: 1, name: 'Product 1', price: '$10', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 2, name: 'Product 2', price: '$20', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 3, name: 'Product 3', price: '$30', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 4, name: 'Product 4', price: '$40', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 5, name: 'Product 5', price: '$50', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 6, name: 'Product 6', price: '$60', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 7, name: 'Product 7', price: '$70', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 8, name: 'Product 8', price: '$80', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 9, name: 'Product 9', price: '$90', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 10, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 11, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//     { id: 12, name: 'Product 10', price: '$100', imageUrl: 'https://via.placeholder.com/150' },\n//   ]);\n//   const [isAddProductFormOpen, setIsAddProductFormOpen] = useState(false);\n//   const [newProduct, setNewProduct] = useState({ name: '', price: '', imageUrl: '' });\n//   const [editableProductId, setEditableProductId] = useState(null); // State to track which product is being edited\n//   const [editedProduct, setEditedProduct] = useState({ name: '', price: '', imageUrl: '' });\n\n//   const addToCart = (product) => {\n//     const existingItemIndex = cartItems.findIndex(item => item.id === product.id);\n  \n//     if (existingItemIndex !== -1) {\n//       const updatedCartItems = cartItems.map((item, index) => {\n//         if (index === existingItemIndex) {\n//           return { ...item, quantity: item.quantity + 1 };\n//         }\n//         return item;\n//       });\n  \n//       setCartItems(updatedCartItems);\n//     } else {\n//       setCartItems([...cartItems, { ...product, quantity: 1 }]);\n//     }\n//   };\n\n//   const removeFromCart = (productId) => {\n//     const updatedCartItems = cartItems.filter(item => item.id !== productId);\n//     setCartItems(updatedCartItems);\n//   };\n\n//   const updateCartItem = (productId, newQuantity) => {\n//     const updatedCartItems = cartItems.map(item => {\n//       if (item.id === productId) {\n//         return { ...item, quantity: newQuantity };\n//       }\n//       return item;\n//     });\n//     setCartItems(updatedCartItems);\n//   };\n\n//   const toggleCart = () => {\n//     setIsCartOpen(prevState => !prevState);\n//   };\n\n//   const addProduct = () => {\n//     setProducts([...products, { ...newProduct, id: products.length + 1 }]);\n//     setIsAddProductFormOpen(false);\n//     setNewProduct({ Art_ID:' ',name: '', price: '', imageUrl: '' });\n//   };\n\n//   const deleteProduct = (productId) => {\n//     const updatedProducts = products.filter(product => product.id !== productId);\n//     setProducts(updatedProducts);\n//   };\n\n//   const handleEditProduct = (productId) => {\n//     setEditableProductId(productId);\n//     const productToEdit = products.find(product => product.id === productId);\n//     setEditedProduct({ ...productToEdit });\n//   };\n\n//   const submitEditedProduct = () => {\n//     const updatedProducts = products.map(product => {\n//       if (product.id === editableProductId) {\n//         return { ...editedProduct };\n//       }\n//       return product;\n//     });\n//     setProducts(updatedProducts);\n//     setEditableProductId(null); // Reset editableProductId after updating the product\n//   };\n\n//   return (\n//     <div>\n//       <Header headName=\"SignOut\" cartCount={cartItems.length} toggleCart={toggleCart} />\n//       <div className=\"body-page\">\n//         <div className=\"product-grid\">\n//           {/* Plus icon to toggle add product form */}\n//           <div onClick={() => setIsAddProductFormOpen(true)}>\n//             <AddIcon />\n//             <span>Add Product</span>\n//           </div>\n\n//           {/* Add product form */}\n//           {isAddProductFormOpen && (\n//             <div className=\"add-product-modal\">\n//               <div className=\"add-product-modal-content\">\n//                 <span className=\"add-product-modal-close\" onClick={() => setIsAddProductFormOpen(false)}>&times;</span>\n//                 <h2>Add Product</h2>\n//                 <form onSubmit={addProduct}>\n//                 <input type=\"text\" value={newProduct.Art_ID} onChange={(e) => setNewProduct({ ...newProduct, Art_ID: e.target.value })} placeholder=\"Artist ID\" required />\n//                   <input type=\"text\" value={newProduct.name} onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })} placeholder=\"Product Name\" required />\n//                   <input type=\"text\" value={newProduct.price} onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })} placeholder=\"Price\" required />\n//                   <input type=\"text\" value={newProduct.imageUrl} onChange={(e) => setNewProduct({ ...newProduct, imageUrl: e.target.value })} placeholder=\"Image URL\" required />\n//                   <button type=\"submit\">Add Product</button>\n//                 </form>\n//               </div>\n//             </div>\n//           )}\n\n//           {/* Display existing products */}\n//           {products.map(product => (\n//             <div key={product.id} className=\"product-card\">\n//               <img src={product.imageUrl} alt={product.name} className=\"product-image\" />\n//               <div className=\"product-info\">\n//                 {/* Editable fields */}\n//                 {editableProductId === product.id ? (\n//                   <div>\n//                     <input type=\"text\" value={editedProduct.name} onChange={(e) => setEditedProduct({ ...editedProduct, name: e.target.value })} />\n//                     <input type=\"text\" value={editedProduct.price} onChange={(e) => setEditedProduct({ ...editedProduct, price: e.target.value })} />\n//                     <input type=\"text\" value={editedProduct.imageUrl} onChange={(e) => setEditedProduct({ ...editedProduct, imageUrl: e.target.value })} />\n//                     <button onClick={submitEditedProduct}>Submit</button>\n//                   </div>\n//                 ) : (\n//                   <div>\n//                     <div className=\"product-name\">{product.name}</div>\n//                     <div className=\"product-price\">{product.price}</div>\n//                   </div>\n//                 )}\n//                 <button className=\"add-to-cart-button\" onClick={() => addToCart(product)}>\n//                   <AddIcon /> Add to Cart\n//                 </button>\n//                 {/* Admin functionalities */}\n//                 <DeleteIcon onClick={() => deleteProduct(product.id)} />\n//                 <EditIcon onClick={() => handleEditProduct(product.id)} />\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       {/* Conditionally render CheckoutPage based on isCartOpen */}\n//       {isCartOpen && (\n//         <CheckoutPage\n//           cartItems={cartItems}\n//           removeFromCart={removeFromCart}\n//           updateCartItem={updateCartItem}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n// export default BodyPage1;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}